dist: xenial
os: linux
language: java
jdk:
  - openjdk11

services:
  - docker

cache:
  directories:
    - $HOME/.m2

env:
  global:
    - VERSION_EDITION=Community

branches:
  only:
    - master
    - develop
    - feature/REPO-4735_Add-release-stages

stages:
  - name: test
    if: branch !=feature/REPO-4735_Add-release-stages
  - engineering release
  - company release

jobs:
  include:
    - stage: test
      name: "WhiteSource scan"
      # only on develop and if it is not a PR
      if: fork = false AND branch = develop AND type != pull_request
      install:
        - travis_retry travis_wait 30 mvn -q install "-Dversion.edition=${VERSION_EDITION}" -f war/pom.xml
      script:
        # Download the latest version of WhiteSource Unified Agent
        - curl -LJO https://github.com/whitesource/unified-agent-distribution/raw/master/standAlone/wss-unified-agent.jar
        # Run WhiteSource Unified Agent
        - java -jar wss-unified-agent.jar -apiKey ${WHITESOURCE_API_KEY} -c .wss-unified-agent.config -d ./war
    - name: "REST API TAS tests part1"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn install -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part1 -Denvironment=default -DrunBugs=false
    - name: "REST API TAS tests part2"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn install -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part2 -Denvironment=default -DrunBugs=false
    - name: "REST API TAS tests part3"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn install -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part3 -Denvironment=default -DrunBugs=false
    - name: "CMIS TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal+transforms.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 40 mvn install -q -f tests/tas-cmis/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - name: "Email TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn install -q -f tests/tas-email/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - name: "WebDAV TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn install -q -f tests/tas-webdav/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - name: "Integration TAS tests"
      jdk: openjdk11
      install:
        - travis_retry travis_wait 40 mvn install -q "-Dversion.edition=${VERSION_EDITION}" -Dmaven.javadoc.skip=true -PcommunityDocker
        - ./tests/scripts/start-compose.sh ./tests/environment/docker-compose-minimal.yml
        - ./tests/scripts/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn install -q -f tests/tas-integration/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false
    - stage: Engineering Release
      name: "Maven release"
      # only on develop or master branch
      if: fork = false AND branch = feature/REPO-4735_Add-release-stages AND commit_message !~ /\[no-release\]/
      # Leaving blank will auto increment the 
      env: 
        - release_version=repo-4735-8
        - development_version=6.3.0-alpha-6-SNAPSHOT
        - COMM_RELEASE_VERSION=
      # Fail the job if there is a docker image tag that matches the release_version (or project version in the POM if not set)
      before_install: 
        - ./scripts/travis/verifyReleaseTag.sh 
        - "cp .travis.settings.xml $HOME/.m2/settings.xml"
      install: skip  
      script:
        # Use full history for release
        - git checkout -B "${TRAVIS_BRANCH}"
        # Add email to link commits to user
        - git config user.email "${GIT_EMAIL}"
        # Add login to quay.io
        - docker login quay.io -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
        # run build release script
        #- ./scripts/travis/buildRelease.sh ${release_version} ${development_version}
        - travis_wait 30 mvn -B -DskipTests -Prelease -X deploy
        #- travis_wait 30 mvn -B -DskipTests -Darguments="-DskipTests" -Prelease -X -DscmCommentPrefix="[maven-release-plugin][skip ci] " -Dusername="${GIT_USERNAME}" -Dpassword="${GIT_PASSWORD}" -DdevelopmentVersion=6.3.0-alpha-6-SNAPSHOT -DreleaseVersion=repo-4735-12 release:clean release:prepare release:perform
      after_failure: mvn release:rollback -DscmCommentPrefix="[maven-release-plugin][skip ci] "
      # TODO: SOLUTION 1
      # Below is a potential solution for deployment of resources
      # deploy:
      # - provider: s3
      #   access_key_id: ${AWS_ACCESS_KEY_ID}
      #   secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      #   bucket: "alfresco-artefacts-staging/alfresco-content-services-community/release/${TRAVIS_BRANCH}/${TRAVIS_BUILD_NUMBER}/"
      #   skip_cleanup: true
      #   acl: private
      #   glob: war/target/alfresco.war
      #   on: 
      #     all_branches:true
      #     condition: $TRAVIS_BRANCH =~ ^(master|develop)$
      # - provider: s3
      #   access_key_id: ${AWS_ACCESS_KEY_ID}
      #   secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      #   bucket: "alfresco-artefacts-staging/alfresco-content-services-community/release/${TRAVIS_BRANCH}/${TRAVIS_BUILD_NUMBER}/"
      #   skip_cleanup: true
      #   acl: private
      #   glob: distribution/target/*-distribution*.zip
      #    on: 
      #     all_branches:true
      #     condition: $TRAVIS_BRANCH =~ ^(master|develop)$
      # TODO: SOLUTION 2
      # Uses AWS CLI in script
      before_deploy: pip install awscli
      deploy:
        - provider: script
          script: echo "This should only run on master and develop" #./scripts/travis/engineeringReleaseDeployment.sh ${TRAVIS_BUILD_NUMBER} ${TRAVIS_BRANCH}
          on:
            all_branches: true
            condition: $TRAVIS_BRANCH =~ ^(master|develop)$
        - provider: script
          script: echo "This should only fun on master" #./scripts/travis/companyReleaseDeployment.sh ${TRAVIS_BUILD_NUMBER} ${TRAVIS_BRANCH}
          on:
            branch: master
    #   # This stage could use a script to deploy to S3, as in bamboo, or the above stage can include a deploy section.
    # - name: Push to S3 # TODO currently placeholder stage
    #   install: skip 
    #   script:
    #     - travis_wait 30 echo "This is the Push to S3 stage" 
    # - stage: "Company Release"
    #   # only on master branch
    #   if: fork = false AND branch = feature/REPO-4735_Add-release-stages AND commit_message !~ /\[no-release\]/
    #   name: "Copy to S3 Release"
    #   install: skip # Nothing to build/install as we are just copying from S3 buckets
    #   # TODO
      # delpoy:
      #   - provider: script
      #     script: ./scripts/travis/companyReleaseDeployment.sh ${TRAVIS_BUILD_NUMBER} ${TRAVIS_BRANCH}
      #     on:
      #       branch: master
      
